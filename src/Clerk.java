import java.util.ArrayList;
import java.util.List;


public class Clerk{
	/***
	
	Adds borrowers based on information generated by the user.
	
    Check-out items borrowed by a borrower. To borrow items, borrowers provide their card number and a 
    list with the call numbers of the items they want to check out. The system determines if the borrower's 
    account is valid and if the library items are available for borrowing. Then it creates one or more 
    borrowing records and prints a note with the items and their due day (which is giver to the borrower).  
    
    To borrow items, borrowers provide their card number and a list with the call numbers of the books they 
    want to check out. The system determines if the borrower's account is valid and if the library items are 
    available for borrowing. 
    
    Then it creates one or more borrowing records and prints a note with the items and their due day 
    (which is giver to the borrower). 
    
    Processes a return. When  an item is returned, the clerk records the return by providing the item's 
    catalogue number. 
    
    The system determines the borrower who had borrowed the item and records that the the 
    item is "in".  If the item is overdue, a fine is assessed for the borrower.  If there is a hold request 
    for this item by another borrower, the item is registered as "on hold" and a message is send to the 
    borrower who made the hold request.
    
    Checks overdue items. The system displays a list of the items that are overdue and the borrowers who 
    have checked them out.  The clerk may decide to send an email messages to any of  them (or to all of them). 

***/
	
	public List<Borrower> ListOfBorrowers = new ArrayList<Borrower>();
	
	public void addBorrower(Borrower someGuy){
		ListOfBorrowers.add(someGuy);
	}
	
	public void checkoutItems(Borrower someGuy){
		int cardNumber = someGuy.SinOrStNo;
		List<Integer> callNumber = new ArrayList(); //this will be the callNumber of the books requested
		checkBorrowerValidity(cardNumber, callNumber);		
		
		
	}
	
	public Boolean checkBorrowerValidity(int cardNum, List callNumber){
		List<Integer> callNum = callNumber;
		for (int n : callNum){
			if (checkAvailableForBorrowing(n)== false){
				return false;
			}
		}
		return true;
	}
	
	public Boolean checkAvailableForBorrowing(int callNumber){
		return true;
	}

}
