import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;


public class Clerk{
	/***
	
	DONE: Adds borrowers based on information generated by the user. 
	
    DONE: Check-out items borrowed by a borrower. To borrow items, borrowers provide their card number and a 
    list with the call numbers of the items they want to check out. The system determines if the borrower's 
    account is valid and if the library items are available for borrowing. Then it creates one or more 
    borrowing records and prints a note with the items and their due day (which is giver to the borrower).  
    
    DONE: To borrow items, borrowers provide their card number and a list with the call numbers of the books they 
    want to check out. The system determines if the borrower's account is valid and if the library items are 
    available for borrowing. 
    
    DONE: Then it creates one or more borrowing records and prints a note with the items and their due day 
    (which is giver to the borrower). 
    
    DONE: Processes a return. When  a book is returned, the clerk records the return by providing the book's 
    callnumber. 
    
    The system determines the borrower who had borrowed the item and records that the item is "in".  If 
    the item is overdue, a fine is assessed for the borrower.  If there is a hold request for this item by 
    another borrower, the item is registered as "on hold" and a message is send to the borrower who made the
    hold request.
    
    Checks overdue items. The system displays a list of the items that are overdue and the borrowers who 
    have checked them out.  The clerk may decide to send an email messages to any of  them (or to all of them). 

***/
	
	public List<Borrower> ListOfBorrowers = new ArrayList<Borrower>();
	
	public void addBorrower(Borrower someGuy){
		ListOfBorrowers.add(someGuy);
	}
	
	public void checkoutItems(Borrower someGuy){
		int cardNumber = someGuy.SinOrStNo;
		List<Integer> callNumber = new ArrayList(); //this will be the callNumber of the books requested
		if (checkBorrowerValidity(cardNumber, callNumber)==true){
			createBorrowingRecord();		
		}
	}
	
	public Boolean checkBorrowerValidity(int cardNum, List callNumber){
		List<Integer> callNum = callNumber;
		for (int n : callNum){
			if (checkAvailableForBorrowing(n)== false){
				return false;
			}
		}
		return true;
	}
	
	public Boolean checkAvailableForBorrowing(int callNumber){
		return true;
	}
	
	public void createBorrowingRecord(){
		JOptionPane.showMessageDialog(null, "Record Created"); //this will be a database record not a UI thing..
	}
	
	public int processReturn(Book b){
		Book book = b;
		int callNumber= book.callNumber;
		
		return callNumber;
	}

}
